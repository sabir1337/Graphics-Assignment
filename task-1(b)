#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <iostream>
#include <cmath>
using namespace std;

// -----------------------------------------------
// WINDOW CONFIGURATION
// -----------------------------------------------
const int WIDTH = 500;
const int HEIGHT = 500;

// User inputs
int px1 = 100, py1 = 100;
int px2 = 400, py2 = 300;
int thickness = 3;

// -----------------------------------------------
// Plot a single pixel
// -----------------------------------------------
void drawPoint(int x, int y)
{
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

// -----------------------------------------------
// Draw a small vertical or horizontal “strip” 
// to simulate thickness based on slope
// -----------------------------------------------
void drawThickPoint(int x, int y, bool isSteep, int size)
{
    int half = size / 2;
    if (isSteep)
    {
        // For steep slopes, thickness along X
        for (int i = -half; i <= half; i++)
            drawPoint(x + i, y);
    }
    else
    {
        // For shallow slopes, thickness along Y
        for (int i = -half; i <= half; i++)
            drawPoint(x, y + i);
    }
}

// -----------------------------------------------
// Enhanced Bresenham with thickness + all slopes
// -----------------------------------------------
void drawBresenhamThick(int x1, int y1, int x2, int y2, int t)
{
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int sx = (x1 < x2) ? 1 : -1;
    int sy = (y1 < y2) ? 1 : -1;

    bool isSteep = (dy > dx);
    int error = (isSteep ? 2 * dx - dy : 2 * dy - dx);

    int steps = isSteep ? dy : dx;
    int x = x1, y = y1;

    for (int i = 0; i <= steps; i++)
    {
        // Simple gradient color
        float r = (float)i / steps;
        float g = 1.0f - r;
        float b = 0.5f + 0.5f * sin(i * 0.1);

        glColor3f(r, g, b);
        drawThickPoint(x, y, isSteep, t);

        if (!isSteep)
        {
            if (error > 0)
            {
                y += sy;
                error -= 2 * dx;
            }
            x += sx;
            error += 2 * dy;
        }
        else
        {
            if (error > 0)
            {
                x += sx;
                error -= 2 * dy;
            }
            y += sy;
            error += 2 * dx;
        }
    }
}

// -----------------------------------------------
// Draw coordinate axes
// -----------------------------------------------
void drawAxes()
{
    glColor3f(0.4f, 0.4f, 0.4f);
    glBegin(GL_LINES);
        glVertex2i(0, HEIGHT / 2);
        glVertex2i(WIDTH, HEIGHT / 2);
        glVertex2i(WIDTH / 2, 0);
        glVertex2i(WIDTH / 2, HEIGHT);
    glEnd();
}

// -----------------------------------------------
// Display Callback
// -----------------------------------------------
void renderScene()
{
    glClear(GL_COLOR_BUFFER_BIT);

    drawAxes();
    drawBresenhamThick(px1, py1, px2, py2, thickness);

    glFlush();
}

// -----------------------------------------------
// OpenGL Initialization
// -----------------------------------------------
void setupOpenGL()
{
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glPointSize(3.0);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, WIDTH, 0, HEIGHT);
}

// -----------------------------------------------
// Main Function
// -----------------------------------------------
int main(int argc, char** argv)
{
    cout << "Enter start (x1 y1) and end (x2 y2) points: ";
    cin >> px1 >> py1 >> px2 >> py2;

    cout << "Enter line thickness: ";
    cin >> thickness;
    if (thickness < 1) thickness = 1;

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(WIDTH, HEIGHT);
    glutInitWindowPosition(120, 120);
    glutCreateWindow("Thick Bresenham Line");

    setupOpenGL();
    glutDisplayFunc(renderScene);
    glutMainLoop();

    return 0;
}
